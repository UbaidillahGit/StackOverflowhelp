class OverlayBuilder extends StatefulWidget{
  final bool showOverlayTrue;
  final Function(BuildContext) overlayBuild;

  OverlayBuilder({
    this.showOverlayTrue = true, 
    this.overlayBuild, 
  });

  @override
  _OverlayBuildState2 createState() => _OverlayBuildState2();
}

class _OverlayBuildState2 extends State<OverlayBuilder> {
  OverlayEntry overlayEntry;

  @override
  void initState(){
    super.initState();

    if (widget.showOverlayTrue) {
      WidgetsBinding.instance.addPostFrameCallback((_) => showOverlay());
    }
  }

  @override
  void didUpdateWidget(OverlayBuilder oldWidget){
    super.didUpdateWidget(oldWidget);
    WidgetsBinding.instance.addPostFrameCallback((_) => syncWidgetAndOverlay());
  }

  @override
  void reassemble(){
    super.reassemble();
    WidgetsBinding.instance.addPostFrameCallback((_) => syncWidgetAndOverlay());
  }

  @override
  void dispose(){
    if (isShowingOverlay()) {
      hideOverlay();
    }
    super.dispose();
  }

  bool isShowingOverlay() => overlayEntry != null;

  void showOverlay(){
    overlayEntry = OverlayEntry(
      builder: widget.overlayBuild
    );
    addToOverlay(overlayEntry);
  }

  void addToOverlay(OverlayEntry entry) async {
    print('addToOverlay');
    Overlay.of(context).insert(entry);
  }

  void hideOverlay(){
    print('hideOverlay');
    overlayEntry.remove();
    overlayEntry = null;
  }

  void syncWidgetAndOverlay(){
    if (isShowingOverlay() && !widget.showOverlayTrue) {
      hideOverlay();
    } else if (!isShowingOverlay() && widget.showOverlayTrue){
      showOverlay();
    }
  }

  @override
  Widget build(BuildContext context) {
    return FloatingActionButton(
      onPressed: () {
        print('pressed');
        if (controllerFab.isDismissed) {
          controllerFab.forward();
        } else {
          controllerFab.reverse();
        }
      },
      tooltip: 'Increment menu',
      child: Icon(Icons.menu),
      elevation: 2.0,
    );
  }
}
